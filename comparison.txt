# test.js와 SetProfile.jsx의 PATCH 요청 로직 차이점

## 1. API 호출 방식
- **test.js**: 직접 axios 라이브러리를 사용하여 요청
  ```js
  await axios.patch(`http://localhost:5001/api/user/updateUser/2`, updateData, {...})
  ```
- **SetProfile.jsx**: 프로젝트 내 axios 인스턴스를 사용
  ```js
  await api.patch(`/api/user/updateUser/${userId}`, updateData)
  ```

## 2. 요청 URL
- **test.js**: 전체 URL을 직접 지정 (`http://localhost:5001/api/user/updateUser/2`)
- **SetProfile.jsx**: 상대 경로만 지정 (`/api/user/updateUser/${userId}`)
  - axiosInstance.js에서 baseURL이 설정됨: `${process.env.REACT_APP_BACKEND_HOST}`

## 3. 인증 처리
- **test.js**: 요청 옵션에 직접 토큰 지정
  ```js
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  }
  ```
- **SetProfile.jsx**: axiosInstance의 인터셉터에서 자동으로 토큰 처리
  ```js
  // axiosInstance.js에서 모든 요청에 자동 적용
  instance.interceptors.request.use((config) => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  });
  ```

## 4. 데이터 구조
- **test.js**: 단순한 구조
  ```js
  {
    "nick_name": "ttest"
  }
  ```
- **SetProfile.jsx**: 중첩된 구조
  ```js
  {
    Profile: {
      nick_name: formData.nick_name,
      email: formData.email,
      phone: formData.phone,
      company: formData.company,
      bio: formData.bio,
      skill: skillArray
    }
  }
  ```

## 5. 에러 처리
- **test.js**: 간단한 콘솔 로그
  ```js
  console.error('에러 발생:', err.response ? err.response.data : err.message);
  ```
- **SetProfile.jsx**: 콘솔 로그 + 사용자 알림
  ```js
  console.error('업데이트 실패:', error);
  alert('프로필 업데이트에 실패했습니다. 나중에 다시 시도해주세요.');
  ```

## 6. 성공 처리
- **test.js**: 응답 데이터만 콘솔에 출력
  ```js
  console.log(res.data);
  ```
- **SetProfile.jsx**: 상태 업데이트 및 사용자 알림
  ```js
  console.log('프로필 업데이트 성공:', updateResponse.data);
  alert('프로필이 성공적으로 업데이트되었습니다.');
  setIsChanged(false);
  if (setHandleTogle) {
    setHandleTogle(false);
  }
  ``` 